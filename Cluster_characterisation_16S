rm(list=ls())
getwd()
setwd("D:/Prague/1. Dry grassland development/R/Microbial") #PC

library("phyloseq")
library("vegan")
library("DESeq2")
library("ggplot2")
library("dendextend")
library("tidyr")
library("viridis")
library("reshape")
library("plyr")
library("stringr")
library("metagMisc")
library("igraph")
library(cowplot)
library(car)
library(nlme)
library(sjstats)

load("Count_grass_16S.RDa")
load("Count_aban_16S.RDa")
load("MData_grass_cluster_16S.RDa")
load("MData_aban_cluster_16S.RDa")

#################################0 BASIC PLOTS WITH REL ABUNDANCE PER CLUSTER######################################
head(Count_grass)
head(Count_aban)

#Calculate relative abundances
Count_grass$relreads <- (Count_grass$reads/Count_grass$totreads)*100
Count_aban$relreads <- (Count_aban$reads/Count_aban$totreads)*100

#save(Count_grass, file = "Count_grass_16S_100_5.RDa")
#save(Count_aban, file = "Count_aban_16S_100_5.RDa")

######A GRASSLAND#####
#Filter very low taxa
#Sum per cluster per sample
SCount_grass <- ddply(Count_grass, c("sample", "cluster.grass", "family"), summarise,
                      srelreads = sum(relreads, na.rm=TRUE)
)
SCount_grass

temp_grass <- ddply(SCount_grass, c("cluster.grass", "family"), summarise,
                    mrelreads = mean(srelreads, na.rm=TRUE)
)
temp_grass

temp_grass$family[which(temp_grass$family == "" | is.na(temp_grass$family))] <- "unknown"
temp_grass$family[which(temp_grass$mrelreads < 1.5)] <- "other"
#temp_grass <- temp_grass[which(!is.na(temp_grass$cluster.grass)),] #delete NA cluster
#temp_grass$cluster.grass <- as.factor(temp_grass$cluster.grass)
str(temp_grass)

pairPalette <- c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C",
                          "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A", "#FFFF99", "#B15928", "black")
                          
plotSA <- ggplot(temp_grass, aes(x=cluster.grass, y=mrelreads, fill=family)) +
  geom_bar(width=0.6, stat="identity") +
  theme_bw() +
  theme(legend.title=element_blank()) +
  labs(x="Prokaryote cluster", y="% of 16S rRNA read numbers recovered", title="Natural grassland")+
  #scale_fill_brewer(palette = "Paired")+
  scale_x_continuous(breaks=seq(1,9,1))+
  scale_fill_manual(values=pairPalette)
plotSA

#Check total per cluster
tot_grass <- ddply(temp_grass, c("cluster.grass"), summarise,
                   totmrelreads = sum(mrelreads, na.rm=TRUE))
tot_grass
temp_grass <- merge(temp_grass, tot_grass, by = c("cluster.grass"))
temp_grass$relcluster <- (temp_grass$mrelreads/temp_grass$totmrelreads)*100
temp_grass$family[which(temp_grass$relcluster < 9)] <- "other"
temp_grass[which(temp_grass$cluster.grass == 9),]

######B ABANDONED#####
#Filter very low taxa
#Sum per cluster per sample
SCount_aban <- ddply(Count_aban, c("sample", "cluster.aban", "family"), summarise,
                     srelreads = sum(relreads, na.rm=TRUE)
)
SCount_aban

temp_aban <- ddply(SCount_aban, c("cluster.aban", "family"), summarise,
                   mrelreads = mean(srelreads, na.rm=TRUE)
)
temp_aban

temp_aban$family[which(temp_aban$family == "" | is.na(temp_aban$family))] <- "unknown"
temp_aban$family[which(temp_aban$mrelreads < 1.5)] <- "other"

pairPalette <- c("#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C", "#FB9A99", "#E31A1C",
                          "#FDBF6F", "#FF7F00", "#CAB2D6", "#6A3D9A", "#FFFF99", "#B15928", "black")
                          
plotSB <- ggplot(temp_aban, aes(x=cluster.aban, y=mrelreads, fill=family)) +
  geom_bar(width=0.6, stat="identity") +
  theme_bw() +
  theme(legend.title=element_blank()) +
  labs(x="Prokaryote cluster", y="% of 16S rRNA read numbers recovered", title="Abandoned arable")+
  #scale_fill_brewer(palette = "Paired")+
  scale_x_continuous(breaks=seq(1,10,1))+
  scale_fill_manual(values=pairPalette)
plotSB

#Check total per cluster
tot_aban <- ddply(temp_aban, c("cluster.aban"), summarise,
                  totmrelreads = sum(mrelreads, na.rm=TRUE))
tot_aban
temp_aban <- merge(temp_aban, tot_aban, by = c("cluster.aban"))
temp_aban$relcluster <- (temp_aban$mrelreads/temp_aban$totmrelreads)*100
temp_aban$family[which(temp_aban$relcluster < 9)] <- "other"
temp_aban[which(temp_aban$cluster.aban == 10),]

#Save family plots togeter
library(cowplot)
prowAB <- plot_grid(plotSA, plotSB, 
                    labels=c("A", "B"), ncol=2, nrow=1, align="hv", label_size=12, vjust=1.1)
prowAB

#save_plot("D:/Prague/1. Dry grassland development/MS/Figures/FigS_taxonomy_prokaryote.png", prowAB,
#          ncol = 2, nrow = 1, base_aspect_ratio = 1.5, dpi=600) #PC


##############################DESCRIBE CLUSTERS#######################################
#Number of unique OTUs
#Natural grassland
head(Count_grass)
temp_grass <- ddply(Count_grass, c("sample", "cluster.grass"), summarise,
                    N = sum(relreads > 0)
)
temp_grass

avgOTUs_grass <- ddply(temp_grass, c("cluster.grass"), summarise,
                       OTUs = mean(N)
)
avgOTUs_grass

#Abandoned arable
head(Count_aban)
temp_aban <- ddply(Count_aban, c("sample", "cluster.aban"), summarise,
                   N = sum(relreads > 0)
)
temp_aban

avgOTUs_aban <- ddply(temp_aban, c("cluster.aban"), summarise,
                      OTUs = mean(N)
)
avgOTUs_aban

#Merge
colnames(temp_grass)[2] <- "cluster"
colnames(temp_aban)[2] <- "cluster"
temp_grass$soil <- "grassland"
temp_aban$soil <- "abandoned"
OTUs_together <- rbind(temp_grass, temp_aban)

#Remove NA cluster
OTUs_together <- OTUs_together[which(!is.na(OTUs_together$cluster)),]

#Boxplot
#Order soil origins
OTUs_together$soil <- factor(OTUs_together$soil, levels = c("grassland", "abandoned"))
head(OTUs_together)

#Boxplot
plotA <- ggplot(data=OTUs_together, aes(x=as.factor(cluster), y=N, fill = soil))+
  facet_wrap(~ soil, ncol=2, scales = "free_x") +
  #geom_hline(yintercept = 0.7831703, colour = "black", size = 1, linetype = "dashed") +
  geom_jitter(position=position_jitter(width=0.3, height=0), aes(colour=soil, alpha=0.9), show.legend = F) +
  geom_boxplot(alpha = 0.5, outlier.shape = NA) +
  scale_fill_manual(values=c("#009E73", "#E69F00", "#0072B2", "#D55E00", "#999999", "#56B4E9", "#CC79A7"), name="Soil")+
  scale_colour_manual(values=c("#009E73", "#E69F00", "#0072B2", "#D55E00", "#999999", "#56B4E9", "#CC79A7"), name="Soil")+
  theme_bw() +
  ggtitle("Prokaryotes") +
  xlab("Network cluster") +
  ylab("Number of unique OTUs") +
  theme(axis.title.y=element_text(size=11, colour = "black", margin=(margin(10,10,0,0))))+
  theme(axis.title.x=element_text(size=11, colour = "black", margin=(margin(10,10,0,0))))+
  theme(panel.grid.minor = element_blank())+
  theme(panel.grid.major = element_blank())+
  theme(strip.text.x=element_text(size=10), strip.background=element_rect(fill="grey"))
plotA

#Save
library(cowplot)
prow <- plot_grid(plotA, labels=c("A"), align="hv", label_size=12, vjust=1.1)
#save_plot("D:/Prague/1. Dry grassland development/MS/Figures/FigS_uniqueOTUs_prokaryotes.png", prow,
#          ncol = 2, nrow = 1, base_aspect_ratio = 1.2, dpi=600) #PC


#Average SI per cluster
load("SI_16S_OTU_rare_noprune_ss1234.RDa")
SI_data_grass <- merge(Count_grass, SI_16S_OTU, by = c("OTU"), all = T)
head(SI_data_grass)
SI_data_aban <- merge(Count_aban, SI_16S_OTU, by = c("OTU"), all = T)
head(SI_data_aban)

#Get rarified data
load("S16_rare_ss1234.Rda")
head(S16_rare)
temp_rare <- data.frame(S16_rare)
temp_rare$OTU <- row.names(temp_rare)
rare_16S <- melt(temp_rare)
colnames(rare_16S) <- c("OTU", "sample", "read_rare")

#Merge
dim(SI_data_grass)
dim(SI_data_aban)
colnames(SI_data_grass)[18] <- "cluster"
colnames(SI_data_aban)[18] <- "cluster"
SI_data_together <- rbind(SI_data_grass, SI_data_aban)
SI_data <- merge(SI_data_together, rare_16S, by = c("OTU", "sample")) #all = T not needed, because rarified data, so have to exclude some OTUs
#View(SI_data)
dim(SI_data)

#Remove NA cluster
SI_data <- SI_data[which(!is.na(SI_data$cluster)),]

#Calculate SI per sample per cluster based on rarefied reads, because SI was based on rarified
SI_sample_cluster <- ddply(SI_data, c("soil", "sample", "cluster"), summarise,
                           SI_cwm = weighted.mean(SI_cor, read_rare, na.rm=T)
)
SI_sample_cluster
#Nan --> if no OTUs of cluster were present

#Average per cluster
avgSI_cluster <- ddply(SI_sample_cluster, c("soil", "cluster"), summarise,
                       avgSI = mean(SI_cwm, na.rm=TRUE), N = sum(!is.na(SI_cwm)), sd = sd(SI_cwm, na.rm=TRUE),
                       SE = (sd / N)
)
avgSI_cluster

#For all prokaryotes
avgSI_pro <- ddply(SI_data, c("soil"), summarise,
                   SI_cwm = weighted.mean(SI_cor, read_rare, na.rm=T)
)
avgSI_pro

#Or all together
mean(avgSI_pro$SI_cwm, na.rm=T)

#Order soil origins
SI_sample_cluster$soil <- factor(SI_sample_cluster$soil, levels = c("grassland", "abandoned"))

#Boxplot
plotA <- ggplot(data=SI_sample_cluster, aes(x=as.factor(cluster), y=SI_cwm, fill = soil))+
  facet_wrap(~ soil, ncol=2, scales = "free_x") +
  geom_hline(yintercept = 0.7831703, colour = "black", size = 1, linetype = "dashed") +
  geom_jitter(position=position_jitter(width=0.3, height=0), aes(colour=soil, alpha=0.9), show.legend = F) +
  geom_boxplot(alpha = 0.5, outlier.shape = NA) +
  scale_fill_manual(values=c("#009E73", "#E69F00", "#0072B2", "#D55E00", "#999999", "#56B4E9", "#CC79A7"), name="Soil")+
  scale_colour_manual(values=c("#009E73", "#E69F00", "#0072B2", "#D55E00", "#999999", "#56B4E9", "#CC79A7"), name="Soil")+
  theme_bw() +
  ggtitle("Prokaryotes") +
  xlab("Network cluster") +
  ylab("Specialisation index") +
  theme(axis.title.y=element_text(size=11, colour = "black", margin=(margin(10,10,0,0))))+
  theme(axis.title.x=element_text(size=11, colour = "black", margin=(margin(10,10,0,0))))+
  theme(panel.grid.minor = element_blank())+
  theme(panel.grid.major = element_blank())+
  theme(strip.text.x=element_text(size=10), strip.background=element_rect(fill="grey"))
plotA

#Save
library(cowplot)
prow <- plot_grid(plotA, labels=c("A"), align="hv", label_size=12, vjust=1.1)
#save_plot("D:/Prague/1. Dry grassland development/MS/Figures/FigS_SI_prokaryotes.png", prow,
#          ncol = 2, nrow = 1, base_aspect_ratio = 1.2, dpi=600) #PC

#Avg lnGAR per cluster
load("lnGAR_rare_both_16S.RDa")
head(rare_both)

#Merge to cluster info
colnames(rare_both)
lnGAR_data_grass <- merge(Count_grass, rare_both[,c(1,4)], by = c("OTU"), all = T)
head(lnGAR_data_grass)
lnGAR_data_aban <- merge(Count_aban, rare_both[,c(1,4)], by = c("OTU"), all = T)
head(lnGAR_data_aban)
colnames(lnGAR_data_grass)[18] <- "cluster"
colnames(lnGAR_data_aban)[18] <- "cluster"
lnGAR_data_together <- rbind(lnGAR_data_grass, lnGAR_data_aban)

#Get rarified data
load("S16_rare_ss1234.Rda")
head(S16_rare)
temp_rare <- data.frame(S16_rare)
temp_rare$OTU <- row.names(temp_rare)
rare_16S <- melt(temp_rare)
colnames(rare_16S) <- c("OTU", "sample", "read_rare")

#Merge
lnGAR_data <- merge(lnGAR_data_together, rare_16S, by = c("OTU", "sample")) #all = T not needed, because rarified data, so have to exclude some OTUs

#Remove NA cluster
lnGAR_data <- lnGAR_data[which(!is.na(lnGAR_data$cluster)),]

#Calculate lnGAR per sample per cluster based on rarefied reads
lnGAR_sample_cluster <- ddply(lnGAR_data, c("soil", "sample", "cluster"), summarise,
                              lnGAR_cwm = weighted.mean(ln_grass_aban_ratio, read_rare, na.rm=T)
)
lnGAR_sample_cluster
#Nan --> if no OTUs of cluster were present

#Average per cluster
avglnGAR_cluster <- ddply(lnGAR_sample_cluster, c("soil", "cluster"), summarise,
                          avglnGAR = mean(lnGAR_cwm, na.rm=TRUE), N = sum(!is.na(lnGAR_cwm)), sd = sd(lnGAR_cwm, na.rm=TRUE),
                          SE = (sd / N)
)
avglnGAR_cluster

#For all prokaryotes
avglnGAR_pro <- ddply(lnGAR_data, c("soil"), summarise,
                      lnGAR_cwm = weighted.mean(ln_grass_aban_ratio, read_rare, na.rm=T)
)
avglnGAR_pro

#Or all together
mean(avglnGAR_pro$lnGAR_cwm, na.rm=T)

#Order soil origins
lnGAR_sample_cluster$soil <- factor(lnGAR_sample_cluster$soil, levels = c("grassland", "abandoned"))

#Boxplot
plotA <- ggplot(data=lnGAR_sample_cluster, aes(x=as.factor(cluster), y=lnGAR_cwm, fill = soil))+
  facet_wrap(~ soil, ncol=2, scales = "free_x") +
  geom_hline(yintercept = 0, colour = "black", size = 1, linetype = "dashed") +
  geom_jitter(position=position_jitter(width=0.3, height=0), aes(colour=soil, alpha=0.9), show.legend = F) +
  geom_boxplot(alpha = 0.5, outlier.shape = NA) +
  scale_fill_manual(values=c("#009E73", "#E69F00", "#0072B2", "#D55E00", "#999999", "#56B4E9", "#CC79A7"), name="Soil")+
  scale_colour_manual(values=c("#009E73", "#E69F00", "#0072B2", "#D55E00", "#999999", "#56B4E9", "#CC79A7"), name="Soil")+
  theme_bw() +
  ggtitle("Prokaryotes") +
  xlab("Network cluster") +
  ylab("Ln response ratio grassland/abandoned") +
  theme(axis.title.y=element_text(size=11, colour = "black", margin=(margin(10,10,0,0))))+
  theme(axis.title.x=element_text(size=11, colour = "black", margin=(margin(10,10,0,0))))+
  theme(panel.grid.minor = element_blank())+
  theme(panel.grid.major = element_blank())+
  theme(strip.text.x=element_text(size=10), strip.background=element_rect(fill="grey"))
plotA

#Save
library(cowplot)
prow <- plot_grid(plotA, labels=c("A"), align="hv", label_size=12, vjust=1.1)
#save_plot("D:/Prague/1. Dry grassland development/MS/Figures/FigS_lnGAR_prokaryotes.png", prow,
#          ncol = 2, nrow = 1, base_aspect_ratio = 1.2, dpi=600) #PC

############################################C CORRELOGRAMS############################################
#####BETWEEN CLUSTERS#####
#Make df with clusters are separate columns
#Natural grassland
temp1 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 1),]
temp2 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 2),]
temp3 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 3),]
temp4 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 4),]
temp5 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 5),]
temp6 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 6),]
temp7 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 7),]
temp8 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 8),]
temp9 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 9),]
#temp10 <- MData_grass_cluster[which(MData_grass_cluster$cluster.grass == 10),]
Mcluster_grass <- cbind(temp1, temp2$mrelreads, temp3$mrelreads, temp4$mrelreads, temp5$mrelreads, 
                        temp6$mrelreads, temp7$mrelreads, temp8$mrelreads, temp9$mrelreads)
colnames(Mcluster_grass)[93:101] <- c("c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9")

#Correlaogram among clusters and totread
M <- cor(cbind(Mcluster_grass$c1, Mcluster_grass$c2, Mcluster_grass$c3, Mcluster_grass$c4, Mcluster_grass$c5,
               Mcluster_grass$c6, Mcluster_grass$c7, Mcluster_grass$c8, Mcluster_grass$c9),use="p")

#Networkplot with significances
#To check significances
Mcluster_grass$seed_density <- factor(Mcluster_grass$seed_density)

#Transform clusters
Mcluster_grass$c1_log <-log(Mcluster_grass$c1)
Mcluster_grass$c3_log <-log(Mcluster_grass$c3)
Mcluster_grass$c4_log <-log(Mcluster_grass$c4)
Mcluster_grass$c5_log <-log(Mcluster_grass$c5)
Mcluster_grass$c6_log <-log(Mcluster_grass$c6)
Mcluster_grass$c8_log <-log(Mcluster_grass$c8+0.001)
Mcluster_grass$c9_log <-log(Mcluster_grass$c9+0.001)

Mcluster_grass_16S <- Mcluster_grass
#save(Mcluster_grass_16S, file = "Mcluster_grass_16S_2.0.RDa")

#Loop
p.value <-list()
R2.value <- list()
for (i in c("c1_log", "c2", "c3_log", "c4_log", "c5_log", "c6_log", "c7", "c8_log", "c9_log")) {
  for (j in c("c1_log", "c2", "c3_log", "c4_log", "c5_log", "c6_log", "c7", "c8_log", "c9_log")) {
    tryCatch({
      
      tmp <- Mcluster_grass[, c(i, j, "seed_density")]
      variabley <- tmp[,1]
      variablex <- tmp[,2]
      fit <- lme(variabley ~ variablex, random = ~1|seed_density, data = tmp)
      p.value[[paste(i,j, sep = "_")]] <- Anova(fit, type=3)[2,3]
      R2.value[[paste(i,j, sep = "_")]] <- extract_numeric(performance::r2(fit)$R2_marginal)
      
    }, error=function(e){cat("ERROR :",conditionMessage(e), "\n")},
    p.value[[paste(i,j, sep = "_")]] <- NA,
    R2.value[[paste(i,j, sep = "_")]] <- NA)
  }
}

p.value
R2.value

#To matrix
tmp_p <- melt(p.value)
tmp_R2 <- melt(R2.value)
m_p <- matrix(tmp_p$value, nrow=9, ncol=9, byrow=T)
m_R2 <- matrix(tmp_R2$value, nrow=9, ncol=9, byrow=T) * sign(M)
diag(m_p) <- NA
diag(m_R2) <- NA
colnames(m_p) <- c("c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9")
rownames(m_p) <- c("c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9")
colnames(m_R2) <- c("c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9")
rownames(m_R2) <- c("c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9")

#To network graph
m_R2[m_p>0.05] <- 0
#save(m_R2, file = "m_R2_16S_natural.RDa")
network <- graph_from_adjacency_matrix(m_R2, weighted=T, mode="undirected", diag=F)
SCount_grass <- ddply(Count_grass, c("sample", "cluster.grass"), summarise,
                      srelreads = sum(relreads, na.rm=TRUE))
vsize <- ddply(SCount_grass, c("cluster.grass"), summarise,
               mrelreads = mean(srelreads, na.rm=TRUE))
vsize <- vsize[1:9,]$mrelreads
vsize_grass_16S <- vsize
#save(vsize_grass_16S, file="vsize_grass_16S.RDa")
E(network)[weight > 0]$color<-"#0072B2" #now color the edges based on their values positive is steelblue
E(network)[weight < 0]$color<-"#D55E00"  #now color the edges based on their values
am.coord <- layout_in_circle(network)
par(mar = c(0.1, 0.1, 0.1, 0.1))   
radian.rescale <- function(x, start=0, direction=1) {
c.rotate <- function(x) (x + start) %% (2 * pi) * direction
c.rotate(scales::rescale(x, c(0, 2 * pi), range(x)))
}
n <- 9
lab.locs <- radian.rescale(x=1:n, direction=-1, start=0)
    
plot(network, vertex.size = vsize*2, edge.width=abs(E(network)$weight)*10, edge.curved=.1, layout = am.coord,
      vertex.color = "grey", vertex.frame.color = "white", vertex.label.font=2, vertex.label=c(1:9), 
      vertex.label.dist=2,  vertex.label.color="black", vertex.label.degree=lab.locs)
p <- recordPlot()
prow <- plot_grid(p, labels=c("C"), align="hv", label_size=12, vjust=1.1, rel_heights = c(1,2))
prow
#save_plot("E:/Prague/1. Dry grassland development/MS/Figures/FigX_Clusters_16S_grass.png", prow,
#          ncol = 0.5, nrow = 0.5, base_aspect_ratio = 1, dpi=600)
